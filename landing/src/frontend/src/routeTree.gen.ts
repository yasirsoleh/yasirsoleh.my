/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainRouteImport } from './routes/_main'
import { Route as MainIndexRouteImport } from './routes/_main.index'
import { Route as MainRegisterRouteImport } from './routes/_main.register'
import { Route as MainLoginRouteImport } from './routes/_main.login'
import { Route as MainPostsIndexRouteImport } from './routes/_main.posts.index'
import { Route as MainPostsCreateRouteImport } from './routes/_main.posts.create'
import { Route as MainPostsPostIdEditRouteImport } from './routes/_main.posts.$postId.edit'

const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)
const MainRegisterRoute = MainRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => MainRoute,
} as any)
const MainLoginRoute = MainLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => MainRoute,
} as any)
const MainPostsIndexRoute = MainPostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => MainRoute,
} as any)
const MainPostsCreateRoute = MainPostsCreateRouteImport.update({
  id: '/posts/create',
  path: '/posts/create',
  getParentRoute: () => MainRoute,
} as any)
const MainPostsPostIdEditRoute = MainPostsPostIdEditRouteImport.update({
  id: '/posts/$postId/edit',
  path: '/posts/$postId/edit',
  getParentRoute: () => MainRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof MainLoginRoute
  '/register': typeof MainRegisterRoute
  '/': typeof MainIndexRoute
  '/posts/create': typeof MainPostsCreateRoute
  '/posts': typeof MainPostsIndexRoute
  '/posts/$postId/edit': typeof MainPostsPostIdEditRoute
}
export interface FileRoutesByTo {
  '/login': typeof MainLoginRoute
  '/register': typeof MainRegisterRoute
  '/': typeof MainIndexRoute
  '/posts/create': typeof MainPostsCreateRoute
  '/posts': typeof MainPostsIndexRoute
  '/posts/$postId/edit': typeof MainPostsPostIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteWithChildren
  '/_main/login': typeof MainLoginRoute
  '/_main/register': typeof MainRegisterRoute
  '/_main/': typeof MainIndexRoute
  '/_main/posts/create': typeof MainPostsCreateRoute
  '/_main/posts/': typeof MainPostsIndexRoute
  '/_main/posts/$postId/edit': typeof MainPostsPostIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/register'
    | '/'
    | '/posts/create'
    | '/posts'
    | '/posts/$postId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/'
    | '/posts/create'
    | '/posts'
    | '/posts/$postId/edit'
  id:
    | '__root__'
    | '/_main'
    | '/_main/login'
    | '/_main/register'
    | '/_main/'
    | '/_main/posts/create'
    | '/_main/posts/'
    | '/_main/posts/$postId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/register': {
      id: '/_main/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof MainRegisterRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/login': {
      id: '/_main/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof MainLoginRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/posts/': {
      id: '/_main/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof MainPostsIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/posts/create': {
      id: '/_main/posts/create'
      path: '/posts/create'
      fullPath: '/posts/create'
      preLoaderRoute: typeof MainPostsCreateRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/posts/$postId/edit': {
      id: '/_main/posts/$postId/edit'
      path: '/posts/$postId/edit'
      fullPath: '/posts/$postId/edit'
      preLoaderRoute: typeof MainPostsPostIdEditRouteImport
      parentRoute: typeof MainRoute
    }
  }
}

interface MainRouteChildren {
  MainLoginRoute: typeof MainLoginRoute
  MainRegisterRoute: typeof MainRegisterRoute
  MainIndexRoute: typeof MainIndexRoute
  MainPostsCreateRoute: typeof MainPostsCreateRoute
  MainPostsIndexRoute: typeof MainPostsIndexRoute
  MainPostsPostIdEditRoute: typeof MainPostsPostIdEditRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainLoginRoute: MainLoginRoute,
  MainRegisterRoute: MainRegisterRoute,
  MainIndexRoute: MainIndexRoute,
  MainPostsCreateRoute: MainPostsCreateRoute,
  MainPostsIndexRoute: MainPostsIndexRoute,
  MainPostsPostIdEditRoute: MainPostsPostIdEditRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
